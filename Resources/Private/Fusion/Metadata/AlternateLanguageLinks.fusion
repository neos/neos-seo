prototype(Neos.Seo:AlternateLanguageLinks) < prototype(Neos.Fusion:Component) {
    @if.languageDimensionExists = ${this.dimensionConfiguration != null}
    @if.onlyRenderWhenInLiveWorkspace = ${this.node.context.workspace.name == 'live'}
    @if.hasNoForeignCanonical = ${String.isBlank(q(this.node).property('canonicalLink'))}

    node = ${documentNode}
    dimension = 'language'
    defaultLocale = ${Configuration.setting('Neos.ContentRepository.contentDimensions.' + this.dimension + '.default')}
    dimensionConfiguration = ${Configuration.setting('Neos.ContentRepository.contentDimensions.' + this.dimension)}
    excludedPresets = ${[]}

    # The hreflang value needs to have a format like 'en-US', therefore internally used values
    # like 'en_US' will be modified to match.
    dimensionValueSeparator = '_'

    renderer = Neos.Fusion:Loop {
        items = Neos.Neos:DimensionsMenuItems {
            dimension = ${props.dimension}
        }
        itemRenderer = afx`
            <Neos.Seo:AlternateLanguageLink @key="defaultLink" node={item.node} hreflang="x-default"
                @if.isDefaultLocale={props.defaultLocale == item.dimensions[props.dimension][0]}/>
            <Neos.Seo:AlternateLanguageLink node={item.node}
                @if.isNotAbsent={item.state != 'absent'}
                @if.existsInTargetDimensions={item.node.dimensions == item.node.context.targetDimensionValues}
                @if.notExcluded={!props.excludedPresets || Array.indexOf(props.excludedPresets, item.dimensions[props.dimension][0]) == -1}
                hreflang={String.replace((item.preset ? item.preset.values[0] : item.dimensions[props.dimension][0]), props.dimensionValueSeparator, '-')}/>
        `
    }
}
